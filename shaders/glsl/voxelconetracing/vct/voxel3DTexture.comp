#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_X_SIZE 1024
#define WORKGROUP_Y_SIZE 1024
#define WORKGROUP_Z_SIZE 64

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform OctreeInitInfo
{
	uint voxelSize;
  	uint maxLevel;	
	uint currentIndex;		
	uint currentLevel;		
};

layout(set = 0, binding = 1, rgba16f) uniform image3D upperLevelalbedo3DImage;
layout(set = 0, binding = 2, rgba16f) uniform image3D lowerLevelalbedo3DImage;

void syncronize()
{
	memoryBarrier();
	barrier();
}


void main()
{	
	vec4 albedo = vec4(0.0);

	if(currentLevel == 0)
	{
		vec4 childalbedo;

		childalbedo = imageLoad( upperLevelalbedo3DImage, ivec3(gl_WorkGroupID.x * 2, gl_WorkGroupID.y * 2, gl_WorkGroupID.z * 2));
		
		if(childalbedo.w > 1.0)
		{		
			imageStore(upperLevelalbedo3DImage, ivec3(gl_WorkGroupID.x * 2, gl_WorkGroupID.y * 2, gl_WorkGroupID.z * 2), childalbedo / childalbedo.w);
		}
		
		childalbedo = imageLoad( upperLevelalbedo3DImage, ivec3(gl_WorkGroupID.x * 2 + 1, gl_WorkGroupID.y * 2, gl_WorkGroupID.z * 2));

		if(childalbedo.w > 1.0)
		{		
			imageStore(upperLevelalbedo3DImage, ivec3(gl_WorkGroupID.x * 2 + 1, gl_WorkGroupID.y * 2, gl_WorkGroupID.z * 2), childalbedo / childalbedo.w);
		}

		childalbedo = imageLoad( upperLevelalbedo3DImage, ivec3(gl_WorkGroupID.x * 2, gl_WorkGroupID.y * 2 + 1, gl_WorkGroupID.z * 2));

		if(childalbedo.w > 1.0)
		{		
			imageStore(upperLevelalbedo3DImage, ivec3(gl_WorkGroupID.x * 2, gl_WorkGroupID.y * 2 + 1, gl_WorkGroupID.z * 2), childalbedo / childalbedo.w);
		}

		childalbedo = imageLoad( upperLevelalbedo3DImage, ivec3(gl_WorkGroupID.x * 2, gl_WorkGroupID.y * 2, gl_WorkGroupID.z * 2 + 1));

		if(childalbedo.w > 1.0)
		{		
			imageStore(upperLevelalbedo3DImage, ivec3(gl_WorkGroupID.x * 2, gl_WorkGroupID.y * 2, gl_WorkGroupID.z * 2 + 1), childalbedo / childalbedo.w);
		}
		
		childalbedo = imageLoad( upperLevelalbedo3DImage, ivec3(gl_WorkGroupID.x * 2, gl_WorkGroupID.y * 2 + 1, gl_WorkGroupID.z * 2 + 1));

		if(childalbedo.w > 1.0)
		{		
			imageStore(upperLevelalbedo3DImage, ivec3(gl_WorkGroupID.x * 2, gl_WorkGroupID.y * 2 + 1, gl_WorkGroupID.z * 2 + 1), childalbedo / childalbedo.w);
		}

		childalbedo = imageLoad( upperLevelalbedo3DImage, ivec3(gl_WorkGroupID.x * 2 + 1, gl_WorkGroupID.y * 2, gl_WorkGroupID.z * 2 + 1));

		if(childalbedo.w > 1.0)
		{		
			imageStore(upperLevelalbedo3DImage, ivec3(gl_WorkGroupID.x * 2 + 1, gl_WorkGroupID.y * 2, gl_WorkGroupID.z * 2 + 1), childalbedo / childalbedo.w);
		}

		childalbedo = imageLoad( upperLevelalbedo3DImage, ivec3(gl_WorkGroupID.x * 2 + 1, gl_WorkGroupID.y * 2 + 1, gl_WorkGroupID.z * 2));

		if(childalbedo.w > 1.0)
		{		
			imageStore(upperLevelalbedo3DImage, ivec3(gl_WorkGroupID.x * 2 + 1, gl_WorkGroupID.y * 2 + 1, gl_WorkGroupID.z * 2), childalbedo / childalbedo.w);
		}

		childalbedo = imageLoad( upperLevelalbedo3DImage, ivec3(gl_WorkGroupID.x * 2 + 1, gl_WorkGroupID.y * 2 + 1, gl_WorkGroupID.z * 2 + 1));

		if(childalbedo.w > 1.0)
		{		
			imageStore(upperLevelalbedo3DImage, ivec3(gl_WorkGroupID.x * 2 + 1, gl_WorkGroupID.y * 2 + 1, gl_WorkGroupID.z * 2 + 1), childalbedo / childalbedo.w);
		}		
	}
	

	albedo += imageLoad( upperLevelalbedo3DImage, ivec3(gl_WorkGroupID.x * 2, gl_WorkGroupID.y * 2, gl_WorkGroupID.z * 2));
	albedo += imageLoad( upperLevelalbedo3DImage, ivec3(gl_WorkGroupID.x * 2 + 1, gl_WorkGroupID.y * 2, gl_WorkGroupID.z * 2));
	albedo += imageLoad( upperLevelalbedo3DImage, ivec3(gl_WorkGroupID.x * 2, gl_WorkGroupID.y * 2 + 1, gl_WorkGroupID.z * 2));
	albedo += imageLoad( upperLevelalbedo3DImage, ivec3(gl_WorkGroupID.x * 2, gl_WorkGroupID.y * 2, gl_WorkGroupID.z * 2 + 1));
		
	albedo += imageLoad( upperLevelalbedo3DImage, ivec3(gl_WorkGroupID.x * 2, gl_WorkGroupID.y * 2 + 1, gl_WorkGroupID.z * 2 + 1));
	albedo += imageLoad( upperLevelalbedo3DImage, ivec3(gl_WorkGroupID.x * 2 + 1, gl_WorkGroupID.y * 2, gl_WorkGroupID.z * 2 + 1));
	albedo += imageLoad( upperLevelalbedo3DImage, ivec3(gl_WorkGroupID.x * 2 + 1, gl_WorkGroupID.y * 2 + 1, gl_WorkGroupID.z * 2));
	albedo += imageLoad( upperLevelalbedo3DImage, ivec3(gl_WorkGroupID.x * 2 + 1, gl_WorkGroupID.y * 2 + 1, gl_WorkGroupID.z * 2 + 1));
	

	if(albedo.w >= 1.0)
		imageStore(lowerLevelalbedo3DImage, ivec3(gl_WorkGroupID.xyz), albedo / albedo.w);
	else
		imageStore(lowerLevelalbedo3DImage, ivec3(gl_WorkGroupID.xyz), vec4(0.0));
	
}


